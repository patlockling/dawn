<!--Custom: Delivery date day picker--> 

{{ '//code.jquery.com/ui/1.9.2/themes/base/jquery-ui.css' | stylesheet_tag }}
<script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.9.2/jquery-ui.min.js"></script>

<div style="width:300px; clear:both;">
  <p>
    <label for="date">Pick a delivery date:</label>
    <input id="date" type="text" name="attributes[Delivery Date]" readonly="readonly" value="{{ cart.attributes.date }}" />
    <span style="display:block" class="instructions"> All orders will be delivered between 9am and 6pm</span>
  </p>
</div>

<script>
  const DELIVERY_DAYS = [1, 3, 5];
  const HOLIDAYS = ['2021-12-24', '2021-12-27', '2021-12-29', '2022-01-03'];
  const EXTRA_DELIVERY_DATES = ['2021-12-21'];
  const DEFAULT_CUTOFF_TIME = 17;

  const deliveryDayRuleMap = [
    {
      24: 3,  // Sunday -> Wednesday
    },
    {
      24: 2,  // Monday -> Wednesday
    },
    {
      [DEFAULT_CUTOFF_TIME]: 1,  // Tuesday before 5pm -> Wednesday
      24: 3,  // Tuesday after 5pm -> Friday
    },
    {
      24: 2,  // Wednesday -> Friday
    },
    {
      [DEFAULT_CUTOFF_TIME]: 1,  // Thursday before 5pm -> Friday
      24: 4,  // Thursday after 5pm -> Monday
    },
    {
      [DEFAULT_CUTOFF_TIME]: 3,  // Friday before 5pm -> Monday
      24: 5,  // Friday after 5pm -> Wednesday
    },
    {
      24: 4,  // Saturday -> Wednesday
    }
  ];

  const getFallbackToday = () => {
    const date = new Date();
    const invDate = new Date(date.toLocaleString('en-US', {
      timeZone: 'Australia/Sydney'
    }));

    var diff = date.getTime() - invDate.getTime();
    return new Date(date.getTime() - diff);
  }

  const $ = window.jQuery;

  const configureDatePicker = (today) => {
    $("#date").datepicker({
      minDate: 1, 
      maxDate: '+4W',
      dateFormat: 'dd/mm/yy',
      beforeShowDay: (date) => {
        if (isHoliday(date)) {
          return [false, ''];
        }

        if (isExtraDeliveryDate(date)) {
          return [true, ''];
        }

        if (!DELIVERY_DAYS.some(deliveryDay => date.getDay() === deliveryDay)) {
          return [false, ''];
        }

        return [getISODateString(date) >= getISODateString(getUpcomingDeliveryDate()), ''];
      }
    });

    const getDateDiffInDays = (date1, date2) => {
      const utc1 = Date.UTC(date1.getFullYear(), date1.getMonth(), date1.getDate());
      const utc2 = Date.UTC(date2.getFullYear(), date2.getMonth(), date2.getDate());

      return Math.floor((utc2 - utc1) / (1000 * 60 * 60 * 24));
    };

    const getISODateString = (date) => new Date(date.getTime() - (date.getTimezoneOffset() * 60000)).toISOString().substring(0, 10);

    const getNumberOfDaysToDelivery = () => {
      const hour = today.getHours();

      const deliveryDayRule = deliveryDayRuleMap[today.getDay()];
      const cutOffTimes = Object.keys(deliveryDayRule);

      let numberOfDaysToDelivery;
      for (let cutOffTime of cutOffTimes) {
        if (hour < cutOffTime) {
          numberOfDaysToDelivery = deliveryDayRule[cutOffTime];
          break;
        }
      }

      return numberOfDaysToDelivery;
    };

    const getUpcomingDeliveryDate = (daysToDelivery = getNumberOfDaysToDelivery()) => {
      const upcomingDeliveryDate = new Date(today.getTime());
      upcomingDeliveryDate.setDate(today.getDate() + daysToDelivery);

      const diffInDays = getDateDiffInDays(today, upcomingDeliveryDate);
      if (diffInDays > 1) {
        for (let i = 1; i < diffInDays; i++) {
          const possibleExtraDeliveryDate = new Date(today.getTime());
          possibleExtraDeliveryDate.setDate(today.getDate() + i);

          const isPastCutoffTime = (i === 1) && (today.getHours() >= DEFAULT_CUTOFF_TIME);
          if (isExtraDeliveryDate(possibleExtraDeliveryDate) && !isPastCutoffTime) {
            return possibleExtraDeliveryDate;
          }
        }
      }

      return upcomingDeliveryDate;
    };

    const isHoliday = (date) => HOLIDAYS.some(holiday => getISODateString(date) === holiday);

    const isExtraDeliveryDate = (date) => EXTRA_DELIVERY_DATES.some(extraDeliveryDate => getISODateString(date) === extraDeliveryDate);

    const setDateIfNotHoliday = (daysToDelivery) => {
      const upcomingDeliveryDate = getUpcomingDeliveryDate(daysToDelivery);
      if (!isHoliday(upcomingDeliveryDate)) {
        $('#date').datepicker('setDate', upcomingDeliveryDate);
        return true;
      }

      return false;
    }

    if (setDateIfNotHoliday()) {
      return;
    }

    const sortedDeliveryDayRuleMap = [...deliveryDayRuleMap];
    const deliveryDaysBeforeToday = sortedDeliveryDayRuleMap.splice(0, today.getDay());
    sortedDeliveryDayRuleMap.push(...deliveryDaysBeforeToday);
    sortedDeliveryDayRuleMap.push(...sortedDeliveryDayRuleMap);

    const validDeliveryDaysForToday = Object.entries(sortedDeliveryDayRuleMap[0])
    .filter(rule => rule[0] > today.getHours())
    .reduce((acc, currValue) => {
      acc[currValue[0]] = currValue[1];
      return acc;
    }, {});

    sortedDeliveryDayRuleMap[0] = validDeliveryDaysForToday;

    for (let i = 0; i < sortedDeliveryDayRuleMap.length; i++) {
      const rule = Object.values(sortedDeliveryDayRuleMap[i]);
      let hasFoundDeliveryDate = false;

      for (let daysToDelivery of rule) {
        if (setDateIfNotHoliday(i + daysToDelivery)) {
          hasFoundDeliveryDate = true;
          break;
        }
      }

      if (hasFoundDeliveryDate) {
        break;
      }
    }
  };

  $(() =>
    fetch('https://worldtimeapi.org/api/timezone/Australia/Sydney')
  	  .then(response => {
        if (!response.ok) {
      	  return configureDatePicker(getFallbackToday());
    	}

    	return response.json()
    	  .then(json => configureDatePicker(new Date(json.datetime)))
  	  })
  );
</script>

{% style %}
.ui-datepicker {
	font-family: Poppins, sans-serif;
	background: #ffffff;
}

.ui-datepicker-header {
	background: #0D1650;
	font-weight: 400;
}

.ui-datepicker-prev, .ui-datepicker-next {
	background-color: white;
	opacity: 100;
}

.ui-datepicker-title {
	color: #ffffff;
}

.ui-datepicker-calendar .ui-state-default {
	color: #0D1650;
	background: #ffffff;
	border-color: #ffffff;
	text-align: center;
}

.ui-datepicker-calendar .ui-state-active {
	background: #0D1650;
	color: #ffffff;
}
.ui-datepicker-calendar .ui-state-hover {
	background: #fcd672;
	color: #0D1650;
}


input, select {
	font-family: Poppins;
	font-size: 1.6rem;
	line-height: 1.5;
	letter-spacing: 0.04rem;
	-webkit-appearance: none;
	appearance: none;
	background-color: transparent;
	border: 0;
	border-radius: 0;
	color: rgb(var(--color-foreground));
	width: 100%;
	box-shadow: 0 0 0 0.1rem rgba(var(--color-foreground), 0.55);
	height: 4.5rem;
	box-sizing: border-box;
	transition: box-shadow var(--duration-short) ease;
	padding-left: 15px;
}
select {
    linear-gradient(45deg, transparent 50%, gray 50%),
    linear-gradient(135deg, gray 50%, transparent 50%),
    linear-gradient(to right, #ccc, #ccc);
	background-position:
		calc(100% - 20px) calc(1em + 2px),
		calc(100% - 15px) calc(1em + 2px),
		calc(100% - 2.5em) 0.5em;
	background-size:
		5px 5px,
		5px 5px,
		1px 1.5em;
  	background-repeat: no-repeat;
}
{% endstyle %}